#!/usr/bin/env bash

function ips() {
    nameservers=(8.8.8.8 8.8.4.4 1.1.1.1 195.129.12.122 192.76.144.66 158.43.240.3 77.88.8.8)
    type=${2:-A}
    for i in "${nameservers[@]}";
    do
        echo "$i"
        dig @"$i" +nocmd "$1" $type +multiline +noall +answer
        echo
    done
}

function wholisten() {
    sudo netstat -ltnp | grep -w ':$1'
}

function ports() {
    sudo netstat -ltnp
}


# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# All the dig info
function digga() {
    type=${2:-A}
    dig +nocmd "$1" "$type" +multiline +noall +answer
}

archive () {
    zip -r "$1".zip "$1" ;
}

function removehost() {
    ssh-keygen -R "$1"
}

function scanhost() {
    ssh-keyscan -H "$1" >> ~/.ssh/known_hosts
}

#  Commit everything
function commit() {
    commitMessage="$1"

    if [ "$commitMessage" = "" ]; then
        commitMessage="wip"
    fi

    git add .
    eval "git commit -a -m '${commitMessage}'"
}

# push to remote origin
function push() {
    target=${1:-origin}
    branch=$(git branch | awk '/\*/ { print $2; }')
    git push $target $branch
}

# force push current branch to remote origin
function pushforce() {
    branch=$(git branch | awk '/\*/ { print $2; }')
    git push origin +$branch
}

function phpversion() {
    version=$(php --version | head -n 1 | cut -d " " -f 2 | cut -d "." -f 1,2)
    echo $version
}

function scheduler() {
    while :; do
        php artisan schedule:run
        echo "Sleeping 60 seconds..."
        sleep 60
    done
}

function phpini() {
    iniPath=$(php -i | grep /.+/php.ini -oE)
    vim $iniPath
}

function scanNetwork() {
    local defaultNet="192.168.1.0/24"
    local network="${1:-$defaultNet}"
    echo "scanning network $network"
    nmap -sn $network -oG - | awk '/Up$/{print $2 " " $3}'
}

function watchlog() {
    tail -f -n 50 storage/logs/laravel.log
}

function watchdir() {
    watch -n 1 -d find .
}

colorize_via_pygmentize() {
    if ! (( $+commands[pygmentize] )); then
        echo "package 'Pygments' is not installed!"
        return 1
    fi

    # If the environment varianle ZSH_COLORIZE_STYLE
    # is set, use that theme instead. Otherwise,
    # use the default.
    if [ -z $ZSH_COLORIZE_STYLE ]; then
        ZSH_COLORIZE_STYLE="default"
    fi

    # pygmentize stdin if no arguments passed
    if [ $# -eq 0 ]; then
        pygmentize -O style="$ZSH_COLORIZE_STYLE" -g
        return $?
    fi

    # guess lexer from file extension, or
    # guess it from file contents if unsuccessful

    local FNAME lexer
    for FNAME in "$@"
    do
        lexer=$(pygmentize -N "$FNAME")
        if [[ $lexer != text ]]; then
            pygmentize -O style="$ZSH_COLORIZE_STYLE" -l "$lexer" "$FNAME"
        else
            pygmentize -O style="$ZSH_COLORIZE_STYLE" -g "$FNAME"
        fi
    done
}
